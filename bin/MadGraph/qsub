#! /usr/bin/env python

# trivial parser of PBS qsub options to convert into LSF bsub ones

import re

def manipulate_script(script_name):

    commandInScript=' ' 

    # open file and read it
    script_file=open(script_name,'r')
    new_script_name = 'new_'+script_name
    new_script_file=open(new_script_name,'w') 

    for line in script_file:
        line = line[:-1] # no \n
        line_content_list = line.split(' ')

        if re.search("PBS_O_WORKDIR",line) != None:
            newline = re.sub("PBS_O_WORKDIR","LS_SUBCWD",line)
            line = newline

        if line_content_list[0]!='#PBS':
            new_script_file.write(line+'\n')
        else:    
            newline = re.sub("#PBS","#BSUB",line)
            if line_content_list[1]=='-N':
                newline = re.sub("-N","-J",newline)

            newcommand = re.sub("#BSUB"," ",newline)
            commandInScript += newcommand
            new_script_file.write(newline+'\n')

    print 'Add command:'+commandInScript
        
    script_file.close()
    new_script_file.close()
    os.system('mv '+new_script_name+' '+script_name)
    os.system('chmod u+x '+script_name)

    return commandInScript;

#################################################################################################    
        
if __name__ == '__main__':
    
    import optparse
    import os
    
    # Here we define an option parser to handle commandline options..
    usage='Usage: %qsub <options> <script name>'
    parser = optparse.OptionParser(usage)
    parser.add_option('-N',
                      help='job name, LSF = -J' ,
                      default='',
                      dest='job_name')
    parser.add_option('-o',
                      help='output file name, LSF = -o' ,
                      default='',
                      dest='output_file')
    parser.add_option('-e',
                      help='error file name, LSF = -e' ,
                      default='',
                      dest='error_file')
    parser.add_option('-q',
                      help='output file name, LSF = -q' ,
                      default='',
                      dest='queue')
    parser.add_option('-V',
                      help='expand variables, LSF = ?, ignored' ,
                      default='',
                      action='store_false')
    parser.add_option('-v',
                      help='expand variables in list, LSF = ?, ignored' ,
                      default='',
                      dest='listvar')

    (options,args) = parser.parse_args()
    
    # Now some fault control..If an error is found we raise an exception
    if args[0]==' ':
        raise('Please specify a script file name for execution!')

    lsfCommand = 'bsub '
    if options.job_name != '':
        lsfCommand += ' -J '+options.job_name
    if options.output_file != '':
        lsfCommand += ' -o '+options.output_file
    if options.error_file != '':
        lsfCommand += ' -e '+options.error_file
    if options.queue != '':
        lsfCommand += ' -q '+options.queue

    addCommandInScript = manipulate_script(args[0])
    lsfCommand += ' '+addCommandInScript

    # trick in order to avoid unwanted e-mails
    if options.output_file == '':
        lsfCommand += ' -o L'+args[0]+'.log'

    lsfCommand += ' '+args[0]

    print 'Submission command: '+lsfCommand
    os.system(lsfCommand)
    
